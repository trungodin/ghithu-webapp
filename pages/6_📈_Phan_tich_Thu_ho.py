import streamlit as st
import pandas as pd
from datetime import datetime
import io
import sys
import os
import matplotlib.pyplot as plt
import matplotlib.ticker as mticker

# Gi√∫p Python t√¨m th·∫•y c√°c module ·ªü th∆∞ m·ª•c cha
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Import c√°c h√†m logic ch√∫ng ta ƒë√£ th√™m v√†o
from backend.analysis_logic import get_main_data, get_analysis_data

# --- C·∫•u h√¨nh trang ---
st.set_page_config(page_title="Ph√¢n t√≠ch Thu H·ªô", page_icon="üí≥", layout="wide")
st.title("üí≥ Dashboard Ph√¢n T√≠ch Thu H·ªô")


# --- C√°c h√†m ti·ªán √≠ch ---

@st.cache_data(ttl=3600)  # Cache trong 1 gi·ªù
def cached_get_main_data(from_date, to_date):
    """L·∫•y v√† cache d·ªØ li·ªáu cho b·∫£ng ch√≠nh."""
    return get_main_data(from_date, to_date)


@st.cache_data(ttl=3600)
def cached_get_analysis_data():
    """L·∫•y v√† cache d·ªØ li·ªáu cho b·∫£ng ph√¢n t√≠ch t·ªìn."""
    return get_analysis_data()


def to_excel(df):
    """Chuy·ªÉn ƒë·ªïi DataFrame sang file Excel trong b·ªô nh·ªõ."""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='BaoCaoThuHo')
    processed_data = output.getvalue()
    return processed_data


def create_revenue_chart(df):
    """
    H√†m ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì doanh thu b·∫±ng Matplotlib v·ªõi c√°c t√πy ch·ªânh.
    """
    # 1. Chu·∫©n b·ªã d·ªØ li·ªáu
    df_chart = df.copy()
    total_revenue = df_chart['T·ªïng c·ªông'].sum()

    # 2. T·∫°o bi·ªÉu ƒë·ªì
    fig, ax = plt.subplots(figsize=(10, 6))
    bars = ax.bar(df_chart.index, df_chart['T·ªïng c·ªông'], color='#89CFF0')

    # 3. Th√™m nh√£n ph·∫ßn trƒÉm l√™n tr√™n m·ªói c·ªôt
    if total_revenue > 0:
        for bar in bars:
            height = bar.get_height()
            percentage = 100 * height / total_revenue
            ax.annotate(f'{percentage:.2f}%',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),  # 3 points vertical offset
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=9, weight='bold')

    # 4. ƒê·ªãnh d·∫°ng tr·ª•c Y v·ªõi d·∫•u ph·∫©y h√†ng ng√†n
    formatter = mticker.FuncFormatter(lambda x, p: f'{x:,.0f}')
    ax.yaxis.set_major_formatter(formatter)

    # 5. T√πy ch·ªânh c√°c chi ti·∫øt kh√°c c·ªßa bi·ªÉu ƒë·ªì
    ax.set_title('Bi·ªÉu ƒê·ªì Doanh Thu', fontsize=16, weight='bold', pad=20)
    ax.set_ylabel('T·ªïng c·ªông (VND)', fontsize=12)
    plt.xticks(rotation=80, ha='right')
    fig.tight_layout()  # T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªÉ kh√¥ng b·ªã c·∫Øt ch·ªØ

    return fig


# --- V√πng b·ªô l·ªçc ---
st.subheader("T√πy ch·ªçn xem d·ªØ li·ªáu")
today = datetime.now()
col1, col2, col3 = st.columns([1, 1, 3])

with col1:
    from_date = st.date_input("T·ª´ ng√†y", value=today, key="from_date_thuho")
with col2:
    to_date = st.date_input("ƒê·∫øn ng√†y", value=today, key="to_date_thuho")

# --- L·∫•y v√† x·ª≠ l√Ω d·ªØ li·ªáu ---
main_df = pd.DataFrame()
analysis_data = {}

# Chuy·ªÉn ng√†y sang ƒë·ªãnh d·∫°ng chu·ªói YYYY-MM-DD cho h√†m backend
from_date_str = from_date.strftime('%Y-%m-%d')
to_date_str = to_date.strftime('%Y-%m-%d')

try:
    with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu..."):
        main_df = cached_get_main_data(from_date_str, to_date_str)
        analysis_data = cached_get_analysis_data()
except Exception as e:
    st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")

# --- B·ªë c·ª•c hi·ªÉn th·ªã ---
left_col, right_col = st.columns([3, 2], gap="large")

# C·ªôt b√™n tr√°i: CH·ªà C√íN L·∫†I B·∫£ng t·ªïng h·ª£p
with left_col:
    st.subheader("B·∫£ng T·ªïng H·ª£p Doanh Thu")

    if not main_df.empty:
        # N√∫t xu·∫•t Excel
        excel_data_export = main_df.copy()
        excel_data_export['T·ªïng c·ªông'] = pd.to_numeric(excel_data_export['T·ªïng c·ªông'], errors='coerce')
        excel_data_export['T·ªïng ho√° ƒë∆°n'] = pd.to_numeric(excel_data_export['T·ªïng ho√° ƒë∆°n'], errors='coerce')
        excel_to_download = to_excel(excel_data_export)

        st.download_button(
            label="üì• Xu·∫•t Excel",
            data=excel_to_download,
            file_name=f"BaoCaoThuHo_{from_date_str}_den_{to_date_str}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

        # ƒê·ªãnh d·∫°ng l·∫°i b·∫£ng ƒë·ªÉ hi·ªÉn th·ªã tr√™n web
        df_display = main_df.copy()
        df_display['T·ªïng c·ªông'] = pd.to_numeric(df_display['T·ªïng c·ªông'], errors='coerce').fillna(0).apply(
            lambda x: f"{int(x):,}")
        df_display['T·ªïng ho√° ƒë∆°n'] = pd.to_numeric(df_display['T·ªïng ho√° ƒë∆°n'], errors='coerce').fillna(0).apply(
            lambda x: f"{int(x):,}")

        table_height = (len(df_display) + 1) * 35 + 3

        st.dataframe(
            df_display,
            column_config={
                "T·ªïng c·ªông": st.column_config.TextColumn("T·ªïng C·ªông (VND)"),
                "T·ªïng ho√° ƒë∆°n": st.column_config.TextColumn("T·ªïng H√≥a ƒê∆°n"),
                "T·ª∑ l·ªá (%)": st.column_config.NumberColumn("T·ª∑ l·ªá", format="%.2f%%"),
            },
            use_container_width=True,
            hide_index=True,
            height=table_height
        )
    else:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu cho kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn.")

# C·ªôt b√™n ph·∫£i: Ph√¢n t√≠ch t·ªìn V√Ä Bi·ªÉu ƒë·ªì
with right_col:
    st.subheader("Ph√¢n T√≠ch T·ªìn")
    if analysis_data:
        for key, value in analysis_data.items():
            st.metric(label=key, value=f"{int(value):,}")
    else:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n t√≠ch t·ªìn.")

    # === TO√ÄN B·ªò CODE BI·ªÇU ƒê·ªí ƒê√É ƒê∆Ø·ª¢C D·ªúI SANG ƒê√ÇY ===
    st.subheader("Bi·ªÉu ƒê·ªì Doanh Thu")

    if not main_df.empty:
        chart_df = main_df[main_df['Ng√¢n H√†ng'] != 'T·ªïng c·ªông'].copy()
        chart_df['T·ªïng c·ªông'] = pd.to_numeric(chart_df['T·ªïng c·ªông'], errors='coerce').fillna(0)
        chart_df = chart_df.sort_values(by='T·ªïng c·ªông', ascending=False)
        chart_df = chart_df.set_index('Ng√¢n H√†ng')

        fig = create_revenue_chart(chart_df)
        st.pyplot(fig)
    # =======================================================