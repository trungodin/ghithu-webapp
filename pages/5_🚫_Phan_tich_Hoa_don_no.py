import streamlit as st
import pandas as pd
import sys
import os
import math

# Gi√∫p Python t√¨m th·∫•y c√°c module ·ªü th∆∞ m·ª•c cha
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Import c√°c h√†m backend
from backend.analysis_logic import (
    run_outstanding_by_year_analysis,
    run_outstanding_by_period_count_analysis,
    fetch_outstanding_details_by_year,
    fetch_outstanding_customers_by_period_count
)

# --- C·∫•u h√¨nh trang ---
st.set_page_config(page_title="Ph√¢n t√≠ch H√≥a ƒë∆°n n·ª£", page_icon="üö´", layout="wide")
st.title("üö´ Ph√¢n t√≠ch H√≥a ƒë∆°n N·ª£")

# --- Kh·ªüi t·∫°o session state ---
if 'outstanding_details_page' not in st.session_state:
    st.session_state.outstanding_details_page = 1

# --- B·ªë c·ª•c Tab ---
tab_by_year, tab_by_period_count = st.tabs(["Th·ªëng k√™ theo NƒÉm", "Th·ªëng k√™ theo S·ªë K·ª≥ N·ª£"])

# --- Tab 1: Th·ªëng k√™ theo NƒÉm (ƒê√£ ho√†n thi·ªán) ---
with tab_by_year:
    st.header("Th·ªëng k√™ H√≥a ƒë∆°n c√≤n n·ª£ theo NƒÉm H√≥a ƒë∆°n")
    if st.button("T·∫£i Th·ªëng k√™ theo NƒÉm"):
        with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu..."):
            try:
                st.session_state.outstanding_by_year_df = run_outstanding_by_year_analysis()
                st.session_state.outstanding_details_page = 1
                if 'outstanding_detail_data' in st.session_state:
                    del st.session_state.outstanding_detail_data
            except Exception as e:
                st.error("L·ªói khi t·∫£i d·ªØ li·ªáu Hƒê n·ª£ theo nƒÉm.")
                st.exception(e)

    df_by_year = st.session_state.get('outstanding_by_year_df')
    if df_by_year is not None and not df_by_year.empty:
        st.dataframe(df_by_year.rename(columns={'NamHoaDon': 'NƒÉm Hƒê', 'SoLuongHoaDonNo': 'S·ªë L∆∞·ª£ng Hƒê N·ª£',
                                                'TongCongNo': 'T·ªïng C·ªông N·ª£'}).style.format(
            {'S·ªë L∆∞·ª£ng Hƒê N·ª£': '{:,}', 'T·ªïng C·ªông N·ª£': '{:,.0f}'}), use_container_width=True)
        st.divider()

        st.subheader("Xem chi ti·∫øt Hƒê n·ª£ c·ªßa m·ªôt nƒÉm")
        col1, col2 = st.columns([1, 2])
        with col1:
            years = df_by_year['NamHoaDon'].unique().tolist()
            selected_year = st.selectbox("Ch·ªçn nƒÉm:", options=years, key="year_select_for_detail")
        with col2:
            page_size = st.number_input("S·ªë d√≤ng m·ªói trang:", min_value=50, max_value=500, value=100, step=50,
                                        key="page_size_for_year")

        if st.button("Xem chi ti·∫øt nƒÉm"):
            st.session_state.outstanding_details_page = 1
            with st.spinner(f"ƒêang t·∫£i chi ti·∫øt Hƒê n·ª£ nƒÉm {selected_year}..."):
                try:
                    detail_df, total_rows = fetch_outstanding_details_by_year(selected_year, page_number=1,
                                                                              page_size=page_size)
                    st.session_state.outstanding_detail_data = {'df': detail_df, 'total_rows': total_rows,
                                                                'page_size': page_size, 'selected_year': selected_year}
                except Exception as e:
                    st.error(f"L·ªói khi t·∫£i chi ti·∫øt nƒÉm {selected_year}.");
                    st.exception(e)

    detail_data = st.session_state.get('outstanding_detail_data')
    if detail_data:
        df_detail = detail_data['df']
        total_rows = detail_data['total_rows']
        page_size = detail_data['page_size']
        current_page = st.session_state.outstanding_details_page
        selected_year_title = detail_data['selected_year']
        total_pages = math.ceil(total_rows / page_size) if page_size > 0 else 1

        st.markdown(f"#### Chi ti·∫øt h√≥a ƒë∆°n n·ª£ cho nƒÉm {selected_year_title} (T·ªïng c·ªông: {total_rows:,} Hƒê)")
        st.dataframe(df_detail.rename(
            columns={'DanhBa': 'Danh B·∫°', 'TENKH': 'T√™n KH', 'SoNha': 'S·ªë Nh√†', 'Duong': 'ƒê∆∞·ªùng', 'NamHD': 'NƒÉm Hƒê',
                     'Ky': 'K·ª≥', 'GiaBieu': 'Gi√° Bi·ªÉu', 'TongCong': 'T·ªïng C·ªông'}).style.format(
            {'T·ªïng C·ªông': '{:,.0f}'}), use_container_width=True)

        st.write("")
        p_col1, p_col2, p_col3 = st.columns([1, 2, 1])
        if p_col1.button("Trang tr∆∞·ªõc", disabled=(current_page <= 1)):
            st.session_state.outstanding_details_page -= 1
            st.rerun()
        p_col2.markdown(f"<div style='text-align: center;'>Trang **{current_page}** / **{total_pages}**</div>",
                        unsafe_allow_html=True)
        if p_col3.button("Trang sau", disabled=(current_page >= total_pages)):
            st.session_state.outstanding_details_page += 1
            st.rerun()

        if 'last_loaded_page' not in st.session_state or st.session_state.last_loaded_page != current_page:
            with st.spinner(f"ƒêang t·∫£i trang {current_page}..."):
                new_page_df, _ = fetch_outstanding_details_by_year(selected_year_title, page_number=current_page,
                                                                   page_size=page_size)
                st.session_state.outstanding_detail_data['df'] = new_page_df
                st.session_state.last_loaded_page = current_page
                st.rerun()

# --- Tab 2: Th·ªëng k√™ theo S·ªë K·ª≥ N·ª£ (ƒê√£ ƒë∆∞·ª£c th√™m code ƒë·∫ßy ƒë·ªß) ---
with tab_by_period_count:
    st.header("Th·ªëng k√™ Danh b·∫° n·ª£ theo S·ªë l∆∞·ª£ng k·ª≥")
    if st.button("T·∫£i Th·ªëng k√™ theo S·ªë K·ª≥ N·ª£"):
        with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu..."):
            try:
                st.session_state.outstanding_by_period_df = run_outstanding_by_period_count_analysis()
                if 'outstanding_customer_df' in st.session_state:
                    del st.session_state.outstanding_customer_df
            except Exception as e:
                st.error("L·ªói khi t·∫£i d·ªØ li·ªáu Hƒê n·ª£ theo s·ªë k·ª≥.")
                st.exception(e)

    df_by_period = st.session_state.get('outstanding_by_period_df')
    if df_by_period is not None:
        if df_by_period.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h√≥a ƒë∆°n n·ª£.")
        else:
            st.dataframe(df_by_period.rename(columns={'KyNo': 'S·ªë K·ª≥ N·ª£', 'SoLuongDanhBa': 'S·ªë L∆∞·ª£ng DB',
                                                      'TongCongTheoKyNo': 'T·ªïng N·ª£ T∆∞∆°ng ·ª®ng'}).style.format(
                {'S·ªë L∆∞·ª£ng DB': '{:,}', 'T·ªïng N·ª£ T∆∞∆°ng ·ª®ng': '{:,.0f}'}), use_container_width=True)
            st.divider()

            st.subheader("Xem chi ti·∫øt Danh b·∫° theo s·ªë k·ª≥ n·ª£")
            ky_no_options = df_by_period['KyNo'].unique().tolist()
            selected_ky_no = st.selectbox("Ch·ªçn s·ªë k·ª≥ n·ª£:", options=ky_no_options)
            if st.button("Xem chi ti·∫øt danh b·∫°"):
                with st.spinner(f"ƒêang t·∫£i chi ti·∫øt c√°c DB n·ª£ {selected_ky_no} k·ª≥..."):
                    try:
                        customer_detail_df = fetch_outstanding_customers_by_period_count(selected_ky_no)
                        st.session_state.outstanding_customer_df = customer_detail_df
                        st.session_state.selected_ky_no_for_detail = selected_ky_no
                    except Exception as e:
                        st.error(f"L·ªói khi t·∫£i chi ti·∫øt cho {selected_ky_no} k·ª≥ n·ª£.")
                        st.exception(e)

    if st.session_state.get('outstanding_customer_df') is not None:
        ky_for_title = st.session_state.get('selected_ky_no_for_detail')
        st.markdown(f"#### Chi ti·∫øt c√°c danh b·∫° n·ª£ {ky_for_title} k·ª≥")
        st.dataframe(st.session_state.outstanding_customer_df.rename(
            columns={'DanhBa': 'Danh B·∫°', 'TenKH': 'T√™n Kh√°ch H√†ng', 'SoNha': 'S·ªë Nh√†', 'Duong': 'ƒê∆∞·ªùng',
                     'SoKyNoThucTe': 'S·ªë K·ª≥ N·ª£', 'TongCongNoCuaDanhBa': 'T·ªïng N·ª£', 'DOT': 'ƒê·ª£t',
                     'GB': 'Gi√° Bi·ªÉu'}).style.format({'T·ªïng N·ª£': '{:,.0f}'}), use_container_width=True)