# GhithuWebApp/pages/3_üîç_Loc_du_lieu_ton.py

import streamlit as st
import pandas as pd
from datetime import date
import time
import sys
import os

# Gi√∫p Python t√¨m th·∫•y c√°c module ·ªü th∆∞ m·ª•c cha
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# B√¢y gi·ªù m·ªõi import c√°c module c·ªßa d·ª± √°n
from backend.analysis_logic import run_debt_filter_analysis, prepare_and_send_to_sheet
import config

# --- C·∫•u h√¨nh trang ---
st.set_page_config(
    page_title="L·ªçc D·ªØ li·ªáu T·ªìn",
    page_icon="üîç",
    layout="wide"
)

# --- Kh·ªüi t·∫°o session state ---
if 'debt_filter_results' not in st.session_state:
    st.session_state.debt_filter_results = None


# <<< TH√äM M·ªöI: H√†m callback ƒë·ªÉ x·ª≠ l√Ω s·ª± ki·ªán "Ch·ªçn t·∫•t c·∫£"
def toggle_all_rows():
    """ƒê∆∞·ª£c g·ªçi khi checkbox 'Ch·ªçn t·∫•t c·∫£' thay ƒë·ªïi tr·∫°ng th√°i."""
    if st.session_state.debt_filter_results is not None:
        # L·∫•y tr·∫°ng th√°i m·ªõi c·ªßa checkbox "Ch·ªçn t·∫•t c·∫£"
        new_state = st.session_state.get('select_all_toggle', False)
        # C·∫≠p nh·∫≠t to√†n b·ªô c·ªôt _is_selected trong DataFrame
        st.session_state.debt_filter_results['_is_selected'] = new_state


# --- Giao di·ªán ---
st.title("üîç L·ªçc D·ªØ li·ªáu T·ªìn & G·ª≠i Danh s√°ch")
st.markdown("S·ª≠ d·ª•ng c√°c b·ªô l·ªçc d∆∞·ªõi ƒë√¢y ƒë·ªÉ truy v·∫•n danh s√°ch kh√°ch h√†ng n·ª£ t·ªìn t·ª´ h·ªá th·ªëng.")

# --- Form Nh·∫≠p li·ªáu cho b·ªô l·ªçc ---
with st.form("debt_filter_form"):
    st.subheader("T√πy ch·ªçn L·ªçc D·ªØ li·ªáu")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        nam = st.number_input("NƒÉm", value=date.today().year, min_value=2020, max_value=2099, step=1)
        ky = st.number_input("K·ª≥", value=date.today().month, min_value=1, max_value=12, step=1)
    with col2:
        min_tongky = st.number_input("T·ªïng K·ª≥ >=", value=2, min_value=1, step=1)
        min_tongcong = st.number_input("T·ªïng C·ªông >=", value=0, min_value=0, step=1,
                                       help="Nh·∫≠p s·ªë ti·ªÅn kh√¥ng c·∫ßn d·∫•u ph·∫©y.")
    with col3:
        dot_filter_str = st.text_input("Ch·ªâ l·∫•y ƒê·ª£t (c√°ch nhau b·ªüi d·∫•u ph·∫©y)", placeholder="VD: 1,2,15,20")
        limit = st.number_input("Gi·ªõi h·∫°n Top (0 l√† kh√¥ng gi·ªõi h·∫°n)", value=100, min_value=0, step=1)
    with col4:
        exclude_codemoi_str = st.text_input("Lo·∫°i tr·ª´ CodeMoi (c√°ch nhau b·ªüi d·∫•u ph·∫©y)", value="K, N, 66, K2")

    submitted = st.form_submit_button("L·ªçc d·ªØ li·ªáu")

# --- X·ª≠ l√Ω logic khi nh·∫•n n√∫t l·ªçc ---
if submitted:
    # Reset l·∫°i checkbox "Ch·ªçn t·∫•t c·∫£" m·ªói khi l·ªçc m·ªõi
    st.session_state.select_all_toggle = False
    with st.spinner("ƒêang truy v·∫•n d·ªØ li·ªáu t·ªìn..."):
        try:
            start_time = time.time()
            # X·ª≠ l√Ω input
            dot_filter = [int(d.strip()) for d in dot_filter_str.split(',') if d.strip().isdigit()]
            exclude_codemoi = [c.strip().upper() for c in exclude_codemoi_str.split(',') if c.strip()]

            params = {
                'nam': nam, 'ky': ky,
                'min_tongky': min_tongky,
                'min_tongcong': min_tongcong,
                'exclude_codemoi': exclude_codemoi,
                'dot_filter': dot_filter,
                'limit': limit if limit > 0 else None
            }

            result_df = run_debt_filter_analysis(params)

            if not result_df.empty:
                result_df.insert(0, "_is_selected", False)

            st.session_state.debt_filter_results = result_df
            st.session_state.query_time = time.time() - start_time
            st.toast(f"T√¨m th·∫•y {len(result_df)} k·∫øt qu·∫£!")
        except Exception as e:
            st.error("L·ªói khi l·ªçc d·ªØ li·ªáu.")
            st.exception(e)
            st.session_state.debt_filter_results = None

# --- Hi·ªÉn th·ªã k·∫øt qu·∫£ v√† khu v·ª±c h√†nh ƒë·ªông ---
if st.session_state.debt_filter_results is not None:
    df = st.session_state.debt_filter_results

    st.divider()

    if df.empty:
        st.warning("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu n√†o ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán l·ªçc c·ªßa b·∫°n.")
    else:
        st.subheader("K·∫øt qu·∫£ l·ªçc")

        col1, col2, col3 = st.columns([1, 2, 1])
        with col1:
            st.metric("S·ªë danh b·∫° t√¨m th·∫•y", f"{len(df):,}")
        with col2:
            total_sum = int(df['TONGCONG'].sum())
            st.metric("T·ªïng c·ªông", f"{total_sum:,} VND")
        with col3:
            st.metric("Th·ªùi gian truy v·∫•n", f"{st.session_state.get('query_time', 0):.2f} gi√¢y")

        st.markdown("---")

        st.subheader("G·ª≠i Danh s√°ch ƒëi x·ª≠ l√Ω")
        action_col1, action_col2, action_col3, action_col4 = st.columns([1.5, 1.5, 1.5, 2])

        with action_col1:
            assign_group = st.selectbox("Giao cho Nh√≥m", options=config.GROUP_OPTIONS[1:])
        with action_col2:
            assign_date = st.date_input("Ng√†y giao")
        with action_col3:
            selected_rows = df[df["_is_selected"]]
            disable_send_button = selected_rows.empty
            if st.button("G·ª≠i DS ƒë√£ ch·ªçn", type="primary", disabled=disable_send_button):
                with st.spinner(f"ƒêang g·ª≠i {len(selected_rows)} kh√°ch h√†ng cho nh√≥m {assign_group}..."):
                    try:
                        assign_date_str = assign_date.strftime("%d/%m/%Y")
                        df_to_send = selected_rows.drop(columns=["_is_selected"])

                        count, msg = prepare_and_send_to_sheet(df_to_send, assign_group, assign_date_str)

                        if count > 0:
                            st.success(msg)
                            st.session_state.debt_filter_results.loc[
                                st.session_state.debt_filter_results["_is_selected"], "_is_selected"] = False
                            st.rerun()
                        else:
                            st.error(msg)
                    except Exception as e:
                        st.error("L·ªói nghi√™m tr·ªçng khi g·ª≠i d·ªØ li·ªáu.")
                        st.exception(e)

        # <<< TH√äM M·ªöI: Checkbox "Ch·ªçn t·∫•t c·∫£"
        with action_col4:
            st.checkbox(
                "Ch·ªçn / B·ªè ch·ªçn T·∫•t c·∫£",
                key='select_all_toggle',
                on_change=toggle_all_rows,
                help="T√≠ch ƒë·ªÉ ch·ªçn t·∫•t c·∫£ c√°c d√≤ng trong b·∫£ng, b·ªè t√≠ch ƒë·ªÉ h·ªßy ch·ªçn."
            )

        st.markdown("T√≠ch v√†o √¥ ·ªü c·ªôt `_is_selected` ƒë·ªÉ ch·ªçn kh√°ch h√†ng c·∫ßn g·ª≠i.")

        edited_df = st.data_editor(
            df,
            key="data_editor",
            use_container_width=True,
            column_config={
                "_is_selected": st.column_config.CheckboxColumn("Ch·ªçn", default=False),
                "TONGCONG": st.column_config.NumberColumn("T·ªïng C·ªông", format="%,.0f VND")
            },
            disabled=df.columns.drop("_is_selected"),
            height=500,
        )

        if not edited_df.equals(st.session_state.debt_filter_results):
            st.session_state.debt_filter_results = edited_df
            st.rerun()