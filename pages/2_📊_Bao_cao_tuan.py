# GhithuWebApp/pages/2_üìä_Bao_cao_tuan.py

import streamlit as st
import pandas as pd
from datetime import datetime, date, timedelta
import io
import sys
import os
from matplotlib.figure import Figure

# Gi√∫p Python t√¨m th·∫•y c√°c module ·ªü th∆∞ m·ª•c cha
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# B√¢y gi·ªù m·ªõi import c√°c module c·ªßa d·ª± √°n
from backend.analysis_logic import run_weekly_report_analysis
from backend.pdf_generator import create_pdf_report
import config

# --- C·∫•u h√¨nh trang ---
st.set_page_config(
    page_title="B√°o c√°o C√¥ng t√°c Tu·∫ßn",
    page_icon="üìä",
    layout="wide"
)


# --- C√°c h√†m Helper ---
def create_pie_chart(pie_data, group_name):
    """T·∫°o bi·ªÉu ƒë·ªì tr√≤n t·ª∑ l·ªá ho√†n th√†nh."""
    # === THAY ƒê·ªîI T·∫†I ƒê√ÇY: Gi·∫£m figsize t·ª´ (4, 3.5) xu·ªëng (3, 2.3) ===
    fig = Figure(figsize=(2,1.2), dpi=100)
    
    if not pie_data or not pie_data.get('sizes'):
        return fig

    ax = fig.add_subplot(111)
    labels, sizes = pie_data['labels'], pie_data['sizes']
    colors, explode = ['#4CAF50', '#F44336'], (0.05, 0)
    
    if sum(sizes) > 0:
        ax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', 
               shadow=False, startangle=90, textprops={'fontsize': 9}) # Gi·∫£m c·ª° ch·ªØ m·ªôt ch√∫t
        ax.axis('equal')
        ax.set_title(f"T·ª∑ l·ªá Ho√†n th√†nh: {group_name}", weight='bold', fontsize=11) # Gi·∫£m c·ª° ch·ªØ ti√™u ƒë·ªÅ
    else:
        ax.text(0.5, 0.5, 'Kh√¥ng c√≥ d·ªØ li·ªáu', ha='center', va='center', fontsize=12)
        ax.axis('off')
        
    fig.tight_layout(pad=0.1) # ƒêi·ªÅu ch·ªânh kho·∫£ng c√°ch
    return fig


def to_excel(dfs_dict: dict) -> bytes:
    """Xu·∫•t m·ªôt dict c√°c DataFrame th√†nh file Excel trong b·ªô nh·ªõ."""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        for sheet_name, df in dfs_dict.items():
            df.to_excel(writer, sheet_name=sheet_name, index=False)
    processed_data = output.getvalue()
    return processed_data


# --- Giao di·ªán Sidebar ƒë·ªÉ nh·∫≠p li·ªáu ---

with st.sidebar:
    st.header("üìä T√πy ch·ªçn B√°o c√°o")
    # S·ª≠ d·ª•ng form ƒë·ªÉ nh√≥m c√°c input
    with st.form(key='report_params_form'):
        # M·∫∑c ƒë·ªãnh ng√†y b·∫Øt ƒë·∫ßu l√† ng√†y ƒë·∫ßu c·ªßa th√°ng hi·ªán t·∫°i
        first_day_of_month = date.today().replace(day=1)
        start_date = st.date_input("T·ª´ ng√†y", value=first_day_of_month)
        end_date = st.date_input("ƒê·∫øn ng√†y", value=date.today())

        # C·∫≠p nh·∫≠t ng√†y thanh to√°n cu·ªëi c√πng d·ª±a tr√™n ng√†y k·∫øt th√∫c
        payment_deadline = st.date_input(
            "Ng√†y TT cu·ªëi c√πng",
            value=end_date + timedelta(days=7)
        )

        selected_group = st.selectbox(
            "Ch·ªçn nh√≥m",
            options=config.GROUP_OPTIONS,
            index=0
        )

        submit_button = st.form_submit_button(label="Ch·∫°y Ph√¢n T√≠ch")

# --- X·ª≠ l√Ω logic khi ng∆∞·ªùi d√πng nh·∫•n n√∫t ---

if submit_button:
    # Chuy·ªÉn ƒë·ªïi ng√†y th√°ng sang chu·ªói ƒë√∫ng ƒë·ªãnh d·∫°ng
    start_date_str = start_date.strftime("%d/%m/%Y")
    end_date_str = end_date.strftime("%d/%m/%Y")
    payment_deadline_str = payment_deadline.strftime("%d/%m/%Y")

    # Hi·ªÉn th·ªã spinner trong khi x·ª≠ l√Ω
    with st.spinner(f"ƒêang ph√¢n t√≠ch d·ªØ li·ªáu cho nh√≥m '{selected_group}'... Vui l√≤ng ch·ªù."):
        try:
            # G·ªçi h√†m x·ª≠ l√Ω t·ª´ backend
            report_results = run_weekly_report_analysis(
                start_date_str,
                end_date_str,
                selected_group,
                payment_deadline_str
            )
            # L∆∞u k·∫øt qu·∫£ v√†o session state ƒë·ªÉ t√°i s·ª≠ d·ª•ng
            st.session_state['weekly_report_results'] = report_results
            if "error" in report_results:
                st.error(report_results["error"])

        except Exception as e:
            st.session_state['weekly_report_results'] = None
            st.error("ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ph√¢n t√≠ch.")
            st.exception(e)

# --- Hi·ªÉn th·ªã k·∫øt qu·∫£ ---

st.title("üìä B√°o c√°o C√¥ng t√°c Tu·∫ßn")

# Ki·ªÉm tra xem c√≥ k·∫øt qu·∫£ trong session state kh√¥ng
if 'weekly_report_results' in st.session_state and st.session_state['weekly_report_results']:
    results = st.session_state['weekly_report_results']

    if "error" in results:
        # st.error(results["error"]) # ƒê√£ hi·ªÉn th·ªã l·ªói ·ªü tr√™n
        pass
    else:
        # --- Khu v·ª±c ti√™u ƒë·ªÅ v√† xu·∫•t file ---
        st.subheader(f"K·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ {results['start_date_str']} ƒë·∫øn {results['end_date_str']}")

        # Th√™m b·ªô l·ªçc v√† c√°c n√∫t download
        col1, col2, col3, col4 = st.columns([2, 1, 1, 4])
        with col1:
            status_filter = st.selectbox(
                "L·ªçc ƒë·ªÉ xu·∫•t file:",
                options=["T·∫•t c·∫£ T√¨nh tr·∫°ng", "Ch∆∞a Thanh To√°n", "ƒê√£ Thanh To√°n", "Kh√≥a n∆∞·ªõc"],
                key="status_filter"
            )

        # Logic l·ªçc d·ªØ li·ªáu tr∆∞·ªõc khi xu·∫•t
        export_dfs = results.get('exportable_dfs', {}).copy()
        if status_filter != "T·∫•t c·∫£ T√¨nh tr·∫°ng":
            details_df = export_dfs.get('Chi_Tiet_Da_Giao')
            if details_df is not None and not details_df.empty:
                filtered_details = details_df[details_df['T√¨nh Tr·∫°ng N·ª£'] == status_filter]
                export_dfs['Chi_Tiet_Da_Giao'] = filtered_details

        with col2:
            st.download_button(
                label="üì• T·∫£i Excel",
                data=to_excel(export_dfs),
                file_name=f"BaoCaoTuan_{date.today().strftime('%Y%m%d')}.xlsx",
                mime="application/vnd.ms-excel"
            )

        with col3:
            # Chu·∫©n b·ªã d·ªØ li·ªáu cho PDF
            pdf_data_for_export = {
                'start_date_str': results['start_date_str'],
                'end_date_str': results['end_date_str'],
                'selected_group': results['selected_group'],
                'tables': {
                    'B·∫¢NG T·ªîNG H·ª¢P:': export_dfs.get('Tong_Hop_Nhom', pd.DataFrame()),
                    'B·∫¢NG TH·ªêNG K√ä CHI TI·∫æT:': export_dfs.get('Thong_Ke_Khoa_Mo', pd.DataFrame())
                }
            }
            success, pdf_bytes = create_pdf_report(pdf_data_for_export)
            if success:
                st.download_button(
                    "üìï T·∫£i PDF",
                    data=pdf_bytes,
                    file_name=f"BaoCaoCongTacTuan_{date.today().strftime('%Y%m%d')}.pdf",
                    mime="application/pdf",
                )

        st.divider()

        # --- Hi·ªÉn th·ªã B·∫£ng t·ªïng h·ª£p v√† Th·ªëng k√™ ---
        summary_df = results.get('summary_df', pd.DataFrame())
        stats_df = results.get('stats_df', pd.DataFrame())

        if not summary_df.empty:
            st.markdown("### B·∫£ng t·ªïng h·ª£p")
            st.dataframe(summary_df, use_container_width=True)

        if not stats_df.empty:
            st.markdown("### B·∫£ng th·ªëng k√™ chi ti·∫øt")
            st.dataframe(stats_df, use_container_width=True)

        st.divider()

        # --- Hi·ªÉn th·ªã Bi·ªÉu ƒë·ªì ---
        pie_chart_data = results.get('pie_chart_data', {})
        if pie_chart_data:
            st.markdown("### T·ª∑ l·ªá ho√†n th√†nh")
            # T·∫°o c√°c c·ªôt ƒë·ªÉ bi·ªÉu ƒë·ªì kh√¥ng b·ªã qu√° l·ªõn
            cols = st.columns(len(pie_chart_data))
            for i, (group_name, data) in enumerate(pie_chart_data.items()):
                with cols[i]:
                    fig = create_pie_chart(data, group_name)
                    st.pyplot(fig)

        # --- Hi·ªÉn th·ªã B·∫£ng chi ti·∫øt ---
        details_df = results.get('details_df', pd.DataFrame())
        if not details_df.empty:
            st.markdown("### Danh s√°ch chi ti·∫øt ƒë√£ giao")
            st.dataframe(details_df, use_container_width=True)
else:
    st.info("Vui l√≤ng ch·ªçn c√°c tham s·ªë trong thanh sidebar b√™n tr√°i v√† nh·∫•n 'Ch·∫°y Ph√¢n T√≠ch' ƒë·ªÉ xem b√°o c√°o.")
