import streamlit as st
import pandas as pd
from datetime import datetime, date, timedelta
import io
import sys
import os
from matplotlib.figure import Figure

# Gi√∫p Python t√¨m th·∫•y c√°c module ·ªü th∆∞ m·ª•c cha
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Import c√°c h√†m backend
from backend.analysis_logic import run_weekly_report_analysis
from backend.pdf_generator import create_pdf_report
import config

# --- C·∫•u h√¨nh trang ---
st.set_page_config(
    page_title="B√°o c√°o C√¥ng t√°c Tu·∫ßn",
    page_icon="üìä",
    layout="wide"
)


# --- H√†m ti·ªán √≠ch ---
def style_debt_status(status):
    """
    Tr·∫£ v·ªÅ m·ªôt chu·ªói CSS ƒë·ªÉ t√¥ m√†u cho t·ª´ng tr·∫°ng th√°i n·ª£.
    """
    if status == 'ƒê√£ Thanh To√°n':
        return 'color: lightgreen; font-weight: bold;'
    elif status == 'Ch∆∞a Thanh To√°n':
        return 'color: salmon; font-weight: bold;'
    elif status == 'Kh√≥a n∆∞·ªõc':
        return 'color: orange; font-weight: bold;'
    return ''


@st.cache_data
def to_excel(dfs_dict: dict) -> bytes:
    """Xu·∫•t m·ªôt dict c√°c DataFrame th√†nh file Excel trong b·ªô nh·ªõ."""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        for sheet_name, df in dfs_dict.items():
            df.to_excel(writer, index=False, sheet_name=sheet_name)
    return output.getvalue()


def create_pie_chart(pie_data, group_name):
    """T·∫°o bi·ªÉu ƒë·ªì tr√≤n t·ª∑ l·ªá ho√†n th√†nh."""
    fig = Figure(figsize=(3, 2.3), dpi=100)
    if not pie_data or not pie_data.get('sizes'): return fig
    ax = fig.add_subplot(111);
    labels, sizes = pie_data['labels'], pie_data['sizes']
    colors, explode = ['#4CAF50', '#F44336'], (0.05, 0)
    if sum(sizes) > 0:
        ax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=False, startangle=90,
               textprops={'fontsize': 9})
        ax.axis('equal');
        ax.set_title(f"T·ª∑ l·ªá Ho√†n th√†nh: {group_name}", weight='bold', fontsize=11)
    else:
        ax.text(0.5, 0.5, 'Kh√¥ng c√≥ d·ªØ li·ªáu', ha='center', va='center', fontsize=12);
        ax.axis('off')
    fig.tight_layout(pad=0.1);
    return fig


# --- Giao di·ªán Sidebar ƒë·ªÉ nh·∫≠p li·ªáu ---
with st.sidebar:
    st.header("üìä T√πy ch·ªçn B√°o c√°o")
    with st.form(key='report_params_form'):
        first_day_of_month = date.today().replace(day=1)
        start_date = st.date_input("T·ª´ ng√†y", value=first_day_of_month)
        end_date = st.date_input("ƒê·∫øn ng√†y", value=date.today())
        payment_deadline = st.date_input("Ng√†y TT cu·ªëi c√πng", value=end_date + timedelta(days=7))
        selected_group = st.selectbox("Ch·ªçn nh√≥m", options=config.GROUP_OPTIONS, index=0)
        submit_button = st.form_submit_button(label="Ch·∫°y Ph√¢n T√≠ch")

# --- X·ª≠ l√Ω logic khi ng∆∞·ªùi d√πng nh·∫•n n√∫t ---
if submit_button:
    start_date_str = start_date.strftime("%d/%m/%Y")
    end_date_str = end_date.strftime("%d/%m/%Y")
    payment_deadline_str = payment_deadline.strftime("%d/%m/%Y")
    with st.spinner(f"ƒêang ph√¢n t√≠ch d·ªØ li·ªáu cho nh√≥m '{selected_group}'... Vui l√≤ng ch·ªù."):
        try:
            # Ch·∫°y h√†m ph√¢n t√≠ch t·ª´ backend
            report_results = run_weekly_report_analysis(start_date_str, end_date_str, selected_group,
                                                        payment_deadline_str)
            st.session_state['weekly_report_results'] = report_results
            if "error" in report_results:
                st.error(report_results["error"])
        except Exception as e:
            st.session_state['weekly_report_results'] = None
            st.error("ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ph√¢n t√≠ch.");
            st.exception(e)

# --- Hi·ªÉn th·ªã k·∫øt qu·∫£ ---
st.title("üìä B√°o c√°o C√¥ng t√°c Tu·∫ßn")

if 'weekly_report_results' in st.session_state and st.session_state['weekly_report_results']:
    results = st.session_state['weekly_report_results']
    if "error" in results:
        st.error(results["error"])
    else:
        st.subheader(f"K·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ {results['start_date_str']} ƒë·∫øn {results['end_date_str']}")

        # --- Khu v·ª±c c√°c n√∫t b·∫•m v√† b·ªô l·ªçc xu·∫•t file ---
        col1, col2, col3, _ = st.columns([2, 1.2, 1, 4])
        with col1:
            status_filter = st.selectbox("L·ªçc ƒë·ªÉ xu·∫•t file:",
                                         options=["T·∫•t c·∫£ T√¨nh tr·∫°ng", "Ch∆∞a Thanh To√°n", "ƒê√£ Thanh To√°n", "Kh√≥a n∆∞·ªõc"],
                                         key="status_filter")

        export_dfs = results.get('exportable_dfs', {}).copy()
        if status_filter != "T·∫•t c·∫£ T√¨nh tr·∫°ng":
            details_df_export = export_dfs.get('Chi_Tiet_Da_Giao')
            if details_df_export is not None and not details_df_export.empty:
                export_dfs['Chi_Tiet_Da_Giao'] = details_df_export[details_df_export['T√¨nh Tr·∫°ng N·ª£'] == status_filter]

        with col2:
            st.download_button(label="üì• T·∫£i Excel", data=to_excel(export_dfs),
                               file_name=f"BaoCaoTuan_{date.today().strftime('%Y%m%d')}.xlsx")
        with col3:
            pdf_data_for_export = {'start_date_str': results['start_date_str'], 'end_date_str': results['end_date_str'],
                                   'selected_group': results['selected_group'],
                                   'tables': {'B·∫¢NG T·ªîNG H·ª¢P:': export_dfs.get('Tong_Hop_Nhom', pd.DataFrame()),
                                              'B·∫¢NG TH·ªêNG K√ä CHI TI·∫æT:': export_dfs.get('Thong_Ke_Khoa_Mo',
                                                                                        pd.DataFrame())}}
            success, pdf_bytes = create_pdf_report(pdf_data_for_export)
            if success: st.download_button("üìï T·∫£i PDF", data=pdf_bytes,
                                           file_name=f"BaoCaoCongTacTuan_{date.today().strftime('%Y%m%d')}.pdf")

        st.divider()

        # --- Hi·ªÉn th·ªã c√°c b·∫£ng v√† bi·ªÉu ƒë·ªì ---
        summary_df = results.get('summary_df', pd.DataFrame())
        if not summary_df.empty:
            st.markdown("### B·∫£ng t·ªïng h·ª£p");
            st.dataframe(summary_df, use_container_width=True, hide_index=True)

        left_col, right_col = st.columns([1, 2])
        with left_col:
            pie_chart_data = results.get('pie_chart_data', {})
            if pie_chart_data:
                st.markdown("### T·ª∑ l·ªá ho√†n th√†nh")
                for group_name, data in pie_chart_data.items():
                    fig = create_pie_chart(data, group_name);
                    st.pyplot(fig)
        with right_col:
            stats_df = results.get('stats_df', pd.DataFrame())
            if not stats_df.empty:
                st.markdown("### B·∫£ng th·ªëng k√™ chi ti·∫øt");
                st.dataframe(stats_df, use_container_width=True, hide_index=True)
        st.divider()

        details_df = results.get('details_df', pd.DataFrame())
        if not details_df.empty:
            st.markdown("### Danh s√°ch chi ti·∫øt ƒë√£ giao")

            df_to_display = details_df.copy()

            # √âp ki·ªÉu c√°c c·ªôt c√≥ th·ªÉ ch·ª©a c·∫£ s·ªë v√† ch·ªØ th√†nh d·∫°ng vƒÉn b·∫£n
            for col in ['Danh b·∫°', 'T√™n KH', 'S·ªë nh√†', 'ƒê∆∞·ªùng', 'K·ª≥ nƒÉm', 'GB', 'ƒê·ª£t', 'H·ªôp', '']:
                if col in df_to_display.columns:
                    df_to_display[col] = df_to_display[col].astype(str)

            # √Åp d·ª•ng t√¥ m√†u v√† ƒë·ªãnh d·∫°ng s·ªë
            st.dataframe(
                df_to_display.style.map(
                    style_debt_status,
                    subset=['T√¨nh Tr·∫°ng N·ª£']
                ).format(
                    {'T·ªïng ti·ªÅn': '{:,.0f}'}
                ),
                use_container_width=True,
                hide_index=True
            )
else:
    st.info("Vui l√≤ng ch·ªçn c√°c tham s·ªë trong thanh sidebar b√™n tr√°i v√† nh·∫•n 'Ch·∫°y Ph√¢n T√≠ch' ƒë·ªÉ xem b√°o c√°o.")