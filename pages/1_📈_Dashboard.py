# GhithuWebApp/pages/1_üìà_Dashboard.py

import streamlit as st
import pandas as pd
from matplotlib.figure import Figure
import matplotlib.ticker as mticker
import sys
import os

# Gi√∫p Python t√¨m th·∫•y c√°c module ·ªü th∆∞ m·ª•c cha
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# B√¢y gi·ªù m·ªõi import c√°c module c·ªßa d·ª± √°n
from backend.analysis_logic import fetch_dashboard_data

# --- C·∫•u h√¨nh trang ---
st.set_page_config(
    page_title="Dashboard T·ªïng quan",
    page_icon="üìà",
    layout="wide"
)


# --- C√°c h√†m v·∫Ω bi·ªÉu ƒë·ªì (T√°i s·ª≠ d·ª•ng t·ª´ logic c≈©) ---

def create_bar_chart(data: pd.Series):
    """T·∫°o bi·ªÉu ƒë·ªì c·ªôt n·ª£ theo khu v·ª±c."""
    fig = Figure(figsize=(7, 5))
    ax = fig.add_subplot(111)
    if not data.empty:
        data.plot(kind='bar', ax=ax, color='#2980b9')
        ax.set_ylabel('T·ªïng ti·ªÅn n·ª£ (VND)', fontsize=10)
        ax.yaxis.set_major_formatter(mticker.FuncFormatter(lambda x, p: format(int(x), ',')))
        ax.tick_params(axis='x', labelrotation=45, labelsize=9)
    ax.set_title('Top 10 Khu v·ª±c c√≥ N·ª£ T·ªìn Cao nh·∫•t', fontsize=14, weight='bold')
    ax.set_xlabel('M√£ Khu v·ª±c (GB)', fontsize=10)
    fig.tight_layout()
    return fig


def create_line_chart(data: pd.Series):
    """T·∫°o bi·ªÉu ƒë·ªì ƒë∆∞·ªùng xu h∆∞·ªõng n·ª£ theo th·ªùi gian."""
    fig = Figure(figsize=(7, 5))
    ax = fig.add_subplot(111)
    if not data.empty:
        data.plot(kind='line', ax=ax, marker='o', color='#c0392b')
        ax.yaxis.set_major_formatter(mticker.FuncFormatter(lambda x, p: format(int(x), ',')))
    ax.set_title('Xu h∆∞·ªõng N·ª£ T·ªìn (2 nƒÉm g·∫ßn nh·∫•t)', fontsize=14, weight='bold')
    ax.set_ylabel('T·ªïng ti·ªÅn n·ª£ (VND)', fontsize=10)
    ax.set_xlabel('Th√°ng/NƒÉm', fontsize=10)
    ax.grid(True, linestyle='--', alpha=0.6)
    fig.tight_layout()
    return fig


# --- Giao di·ªán ch√≠nh c·ªßa trang Dashboard ---

st.title("üìà Dashboard T·ªïng quan T√¨nh h√¨nh N·ª£ t·ªìn")

# N√∫t l√†m m·ªõi d·ªØ li·ªáu
if st.button("L√†m m·ªõi d·ªØ li·ªáu"):
    # X√≥a cache c·ªßa h√†m fetch_dashboard_data
    st.cache_data.clear()
    st.toast("ƒêang t·∫£i l·∫°i d·ªØ li·ªáu m·ªõi nh·∫•t...")


# S·ª≠ d·ª•ng decorator c·ªßa Streamlit ƒë·ªÉ cache k·∫øt qu·∫£
# ttl=3600 nghƒ©a l√† cache s·∫Ω h·∫øt h·∫°n sau 3600 gi√¢y (1 gi·ªù)
@st.cache_data(ttl=3600)
def cached_fetch_dashboard_data():
    return fetch_dashboard_data()


# L·∫•y d·ªØ li·ªáu v√† hi·ªÉn th·ªã
try:
    with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu t·ª´ server, vui l√≤ng ch·ªù..."):
        data = cached_fetch_dashboard_data()

    if not data:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu n·ª£ t·ªìn ƒë·ªÉ hi·ªÉn th·ªã.")
    else:
        # --- Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë KPI ---
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(
                label="T·ªïng N·ª£ T·ªìn",
                value=f"{int(data.get('total_debt', 0)):,}"
            )
        with col2:
            st.metric(
                label="T·ªïng s·ªë Kh√°ch h√†ng n·ª£",
                value=f"{data.get('total_debtors', 0):,}"
            )
        with col3:
            st.metric(
                label="S·ªë KH n·ª£ >= 3 k·ª≥",
                value=f"{data.get('debtors_over_3_periods', 0):,}"
            )

        st.divider()

        # --- Hi·ªÉn th·ªã c√°c bi·ªÉu ƒë·ªì ---
        chart_col1, chart_col2 = st.columns(2)
        with chart_col1:
            debt_by_gb_data = data.get('debt_by_gb', pd.Series(dtype=float))
            fig_bar = create_bar_chart(debt_by_gb_data)
            st.pyplot(fig_bar)

        with chart_col2:
            debt_over_time_data = data.get('debt_over_time', pd.Series(dtype=float))
            fig_line = create_line_chart(debt_over_time_data)
            st.pyplot(fig_line)

except Exception as e:
    st.error(f"ƒê√£ x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu Dashboard: {e}")
    st.exception(e)